# docker-compose.full.yml

services:
  # --------------- GATEWAY ---------------
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: ./Dockerfile
    # restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
      - user-service
      - transaction-service
      - goal-service
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
      # - /usr/src/app/frontend/node_modules
    env_file:
      - ./backend/gateway/.env
    command: >
      sh -c "
        /usr/local/bin/wait-for-it.sh postgres:5432 --timeout=30 --strict &&
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict &&
        pnpm --filter ./backend/gateway dev
      "
    ports:
      - "8000:8000"
    networks:
      - app-network

  # ---------- FRONTEND (Vite + Tailwind) ----------
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./Dockerfile
    # restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
      # - /usr/src/app/frontend/node_modules
    working_dir: /usr/src/app
    command: >
      sh -c "
        /usr/local/bin/wait-for-it.sh postgres:5432 --timeout=30 --strict &&
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict &&
        cd ./frontend && pnpm dev
      "
    ports:
      - "5173:5173"
    networks:
      - app-network

  # --------- USER / TX / GOAL MICROSERVICES ---------
  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./Dockerfile
    # restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
      # - /usr/src/app/frontend/node_modules
    env_file:
      - ./backend/user-service/.env
    command: >
      sh -c "
        /usr/local/bin/wait-for-it.sh postgres:5432 --timeout=30 --strict &&
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict &&
        pnpm --filter ./backend/user-service dev
      "
    ports:
      - "8001:8001"
    networks:
      - app-network

  transaction-service:
    container_name: transaction-service
    build:
      context: .
      dockerfile: ./Dockerfile
    # restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
      # - /usr/src/app/frontend/node_modules
    env_file:
      - ./backend/transaction-service/.env
    command: >
      sh -c "
        /usr/local/bin/wait-for-it.sh postgres:5432 --timeout=30 --strict &&
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict &&
        pnpm --filter ./backend/transaction-service dev
      "
    ports:
      - "8002:8002"
    networks:
      - app-network

  goal-service:
    container_name: goal-service
    build:
      context: .
      dockerfile: ./Dockerfile
    # restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - .:/usr/src/app
      # - /usr/src/app/node_modules
      # - /usr/src/app/frontend/node_modules
    env_file:
      - ./backend/goal-service/.env
    command: >
      sh -c "
        /usr/local/bin/wait-for-it.sh postgres:5432 --timeout=30 --strict &&
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict &&
        pnpm --filter ./backend/goal-service dev
      "
    ports:
      - "8003:8003"
    networks:
      - app-network

  # ------------- DATABASES -------------
  postgres:
    container_name: postgres
    image: postgres:15
    # restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: DBPASSOWD1
      POSTGRES_DB:       pfm_db
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    # restart: unless-stopped
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Web UI
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge
